@page "/todo"
<MContainer Style="max-width: 500px">

    <MTextField @bind-Value="_newTask"
                Label="What are you working on?"
                Solo
                OnKeyDown="OnEnterKeyDown">
        <AppendContent>
            <FadeTransition>
                <MIcon If="@(!string.IsNullOrEmpty(_newTask))"
                       OnClick="()=>Create()">
                    add_circle
                </MIcon>
            </FadeTransition>
        </AppendContent>
    </MTextField>

    <h2 class="text-h4 success--text pl-4">
        Tasks:&nbsp;
        <FadeTransition LeaveAbsolute>
            <KeyTransitionElement Tag="span" Value="@($"task-{_tasks.Count}")">
                @_tasks.Count
            </KeyTransitionElement>
        </FadeTransition>
    </h2>

    <MDivider></MDivider>

    <MRow Class="my-1" Align=AlignTypes.Center>

        <strong class="mx-4 info--text text--darken-2">
            Remaining: @RemainingTasks
        </strong>

        <MDivider Vertical></MDivider>

        <strong class="mx-4 success--text text--darken-2">
            Completed: @CompletedTasks
        </strong>

        <MSpacer></MSpacer>

        <MProgressCircular Value=Progress Class="mr-2"></MProgressCircular>

    </MRow>

    <MDivider Class="mb-4"></MDivider>

    @if (_tasks.Count > 0)
    {
        <MCard>
            <SlideYTransition>
                @*//TODO: group*@
                @for (var i = 0; i < _tasks.Count; i++)
                {
                    var task = _tasks[i];
                    if (i != 0)
                    {
                        <MDivider></MDivider>
                    }

                    <MListItem>

                        <MListItemAction>
                            <MCheckbox TValue="bool" Value="@task.Done"
                               ValueChanged="@(v => task.Done = v)"
                               Color="@(task.Done ? "grey" : "primary")">
                                <LabelContent>
                                    <div class="@(task.Done ? "grey--text" : "primary--text") ml-4">
                                        @task.Title
                                    </div>
                                </LabelContent>
                            </MCheckbox>
                        </MListItemAction>

                        <MSpacer></MSpacer>

                        <ScrollXTransition>
                            <MIcon If="@task.Done" Color="success">
                                mdi-check
                            </MIcon>
                        </ScrollXTransition>

                    </MListItem>
                }
            </SlideYTransition>
        </MCard>
    }

</MContainer>

@code {

    [Inject]
    public TodoCaller TodoCaller { get; set; }

    string _newTask = "";

    private List<TodoGetListDto> _tasks = new();

    int CompletedTasks => _tasks.Count(t => t.Done);

    float Progress => _tasks.Count <= 0 ? 0 : (CompletedTasks * 100f) / _tasks.Count;

    int RemainingTasks => _tasks.Count - CompletedTasks;

    async Task OnEnterKeyDown(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")
        {
            await Create();
        }
    }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadListDataAsync();
    }

    private async Task LoadListDataAsync()
    {
        var result = await TodoCaller.GetListAsync();
        _tasks = result.Result;
    }

    async Task Create()
    {
        await TodoCaller.CreateAsync(new TodoCreateUpdateDto { Title = _newTask, Done = false });

        await LoadListDataAsync();
        _newTask = "";
    }
}
